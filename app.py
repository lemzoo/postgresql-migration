from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate

from alembic import op
import sqlalchemy as sa

import psycopg2


app = Flask(__name__)
db_uri = 'postgresql://postgres:P@ssw0rd@localhost:5433/poc_migration'
app.config['SQLALCHEMY_DATABASE_URI'] = db_uri
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)
migrate = Migrate(app, db)


class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    firstname = db.Column(db.String(80), nullable=False)
    lastname = db.Column(db.String(80), nullable=False)
    # email = db.Column(db.String(120), unique=True, nullable=True)

    def __repr__(self):
        return '<User : {} {}>'.format(self.firstname, self.lastname)


def create_users():
    db.create_all()

    admin = User(firstname='Admin', lastname='User')
    user = User(firstname='Simple', lastname='User')
    developer = User(firstname='Developer', lastname='User')

    db.session.add(admin)
    db.session.add(user)
    db.session.add(developer)

    db.session.commit()
    print('Users are created successfully')


# Make the script migration

def upgrade():
    conn = psycopg2.connect("dbname='poc_migration' user='postgres' host='localhost' port='5433' password='P@ssw0rd'")

    cursor = conn.cursor()
    cursor.execute("""SELECT * FROM public.user""")
    # Fetch all recorded users before adding the column
    users = cursor.fetchall()
    print('Total user = %s' % len(users))
    for user in users:
        print('for id=%s, firstname=%s, lastname=%s' % (user[0], user[1], user[2]))

    # Add column email now
    cursor.execute('ALTER TABLE %s ADD COLUMN %s text' % ('public.user', 'email'))
    conn.commit()

    """ update user email based on the user id """
    sql = """ UPDATE public.user SET email = %s WHERE id = %s"""

    # Add email value
    for user in users:
        email = '%s.%s@email.com' % (user[1], user[2])
        # execute the UPDATE  statement
        cursor.execute(sql, (email, user[0]))

    # Commit the changes to the database
    conn.commit()

    cursor.execute("""SELECT * FROM public.user""")
    users = cursor.fetchall()
    print('Total updated user = %s' % len(users))
    for user in users:
        print('for id=%s, firstname=%s, lastname=%s, email=%s' % (user[0], user[1], user[2], user[3]))

    # Close communication with the PostgreSQL database
    cursor.close()
    conn.close()

    return len(users)


def upgrade_alembic():
    db.create_all()
    # Get all Users before starting the migration
    users = User.query.all()

    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('user', sa.Column('email', sa.String(length=120), nullable=True))
    op.create_unique_constraint(None, 'user', ['email'])
    # ### end Alembic commands ###

    # Apply the migration on the added field
    for user in users:
        user.email = '%s.%s@email.com' % (user.firstname, user.lastname)
        db.session.add(user)
        db.session.commit()


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'user', type_='unique')
    op.drop_column('user', 'email')
    # ### end Alembic commands ###
